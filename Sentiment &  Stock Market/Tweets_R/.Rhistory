library("ROAuth")
library("twitteR")
library(RCurl)
api_key <- "bEm0x3zX0y2PwjDGJh1NDhfpb"
api_secret <- "DSFjV8BDNm5nVrDsKnUvKCtbuzqqHs8G7O4p3B0rVHsAvSdL8Q"   # Consumer secret: *
access_token <- "1021116325-q6IB9ujo8dO4FlerNYEttMfUMSInR47KRXhvxoH"  # Access token:
access_token_secret <- "1fro1HMrQYDpx8QxfHBJkqjlNQbpTkAYHOKmHn9RGKAdR" # Access token secret:
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
api_key <- "bEm0x3zX0y2PwjDGJh1NDhfpb"
api_secret <- "DSFjV8BDNm5nVrDsKnUvKCtbuzqqHs8G7O4p3B0rVHsAvSdL8Q"   # Consumer secret: *
access_token <- "1021116325-q6IB9ujo8dO4FlerNYEttMfUMSInR47KRXhvxoH"  # Access token:
access_token_secret <- "1fro1HMrQYDpx8QxfHBJkqjlNQbpTkAYHOKmHn9RGKAdR" # Access token secret:
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
tweets=searchTwitter("$AAPL", n=3200)
text_cloud = read.csv("iphone.csv", header = F)
text_cloud = read.csv("redmi.csv", header = F)
str(text_cloud$V2)
str(text_cloud$V1)
iphone = read.csv("iphone.csv", header = F)
redmi = read.csv("redmi.csv", header = F)
text_cloud = sapply(tweet_cloud, function(x) x$getText())
text_cloud = redmi$V1
text_cloud = iphone$V1
text_cloud = redmi$V1
matrix = TermDocumentMatrix(corpus,
control = list(removePunctuation = TRUE,
stopwords = c("yahoo", "finance"),
removeNumbers = TRUE, tolower = TRUE))
library(tm)
matrix = TermDocumentMatrix(corpus,
control = list(removePunctuation = TRUE,
stopwords = c("yahoo", "finance"),
removeNumbers = TRUE, tolower = TRUE))
corpus = Corpus(VectorSource(text_cloud))
matrix = TermDocumentMatrix(corpus,
control = list(removePunctuation = TRUE,
stopwords = c("yahoo", "finance"),
removeNumbers = TRUE, tolower = TRUE))
m = as.matrix(matrix)
frequent_words = sort(rowSums(m), decreasing=TRUE)
dframe = data.frame(word=names(frequent_words), freq=frequent_words)
wordcloud(dframe$word, dframe$freq, random.order=TRUE, colors=brewer.pal(8, "Dark2"))
library(wordcloud)
wordcloud(dframe$word, dframe$freq, random.order=TRUE, colors=brewer.pal(8, "Dark2"))
tweets=lapply(tweets, function(t) t$getText())
summary(tweets)
write.csv(tweets, file="tweets.csv")
positive_words=scan("C:/Users/aakashkhandelwal/Downloads/positive-words.txt",what="character",comment.char=";")
positive_words=scan("positive-words.txt",what="character",comment.char=";")
negative_words=scan("negative-words.txt",what="character",comment.char=";")
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "lapply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
Results=score.sentiment(tweets,positive_words,negative_words)
summary(Results)
hist(Results$score)
text_cloud = redmi$V1
corpus = Corpus(VectorSource(text_cloud))
matrix = TermDocumentMatrix(corpus,
control = list(removePunctuation = TRUE,
stopwords = c("yahoo", "finance"),
removeNumbers = TRUE, tolower = TRUE))
m = as.matrix(matrix)
frequent_words = sort(rowSums(m), decreasing=TRUE)
dframe = data.frame(word=names(frequent_words), freq=frequent_words)
library(plyr)
tweets=lapply(tweets, function(t) t$getText())
summary(tweets)
write.csv(tweets, file="tweets.csv")
positive_words=scan("positive-words.txt",what="character",comment.char=";")
negative_words=scan("negative-words.txt",what="character",comment.char=";")
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "lapply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
Results=score.sentiment(tweets,positive_words,negative_words)
summary(Results)
hist(Results$score)
text_cloud = iphone$V1
corpus = Corpus(VectorSource(text_cloud))
matrix = TermDocumentMatrix(corpus,
control = list(removePunctuation = TRUE,
stopwords = c("yahoo", "finance"),
removeNumbers = TRUE, tolower = TRUE))
m = as.matrix(matrix)
frequent_words = sort(rowSums(m), decreasing=TRUE)
dframe = data.frame(word=names(frequent_words), freq=frequent_words)
library(plyr)
matrix = TermDocumentMatrix(corpus,
control = list(removePunctuation = TRUE,
stopwords = stopwords((kind='en')),
removeNumbers = TRUE, tolower = TRUE))
m = as.matrix(matrix)
frequent_words = sort(rowSums(m), decreasing=TRUE)
dframe = data.frame(word=names(frequent_words), freq=frequent_words)
library(plyr)
tweets=lapply(tweets, function(t) t$getText())
positive_words=scan("positive-words.txt",what="character",comment.char=";")
negative_words=scan("negative-words.txt",what="character",comment.char=";")
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "lapply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
Results=score.sentiment(tweets,positive_words,negative_words)
summary(Results)
hist(Results$score)
